@* @{ *@
@* 	ViewData["Title"] = "Home Page"; *@
@* 	var name = User.Identity?.Name; *@
@* 	var role = User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value; *@
@* } *@

@* <div class="text-center"> *@
@* 	<h1 class="display-4">Welcome, @name!</h1> *@
@* 	<p>Your role is @role</p> *@
@* </div> *@

@{
	ViewData["Title"] = "Dashboard";
}

<!-- Auditor Performance -->
<div class="row">
  <div class="col-12 mb-4">
	<div class="card">
	  <div class="row row-bordered g-0">
		<div class="col-lg-12">
		  <div class="card-header d-flex align-items-center justify-content-between">
			<div class="card-title mb-0">
			  <h5 class="m-0 text-center flex-grow-1">Auditor Performance</h5>
			</div>
		  </div>
		  <div id="chartLoader" class="text-center my-4">
			<div class="spinner-border text-primary" role="status">
			  <span class="visually-hidden">Loading...</span>
			</div>
		  </div>
		  <div id="auditorPerformanceChartContainer" class="d-flex justify-content-center px-3" style="height: 300px;">
			<canvas id="auditorPerformanceChart"></canvas>
		  </div>
		</div>
	  </div>
	</div>
  </div>
</div>

<div class="row">
  <!-- Compliance Summary -->
  <div class="col-12 col-xxl-6 mb-4">
	<div class="card h-100">
	  <div class="row row-bordered g-0 h-100">
		<div class="col-lg-12 d-flex flex-column">
		  <div class="card-header d-flex align-items-center justify-content-between">
			<div class="card-title mb-0">
			  <h5 class="m-0">Compliance Summary</h5>
			</div>
			<div>
			  <select id="categoryDropdown" class="form-select w-auto ms-3" onchange="loadComplianceSummary()">
				<option disabled selected>Choose Category</option>
			  </select>
			</div>
		  </div>
		  <div id="complianceChartLoader" class="text-center my-4">
			<div class="spinner-border text-primary" role="status">
			  <span class="visually-hidden">Loading...</span>
			</div>
		  </div>
		  <div id="complianceChartContainer" class="d-flex justify-content-center px-3 mb-3" style="height: 300px;">
			<canvas id="compliancePieChart"></canvas>
		  </div>
		</div>
	  </div>
	</div>
  </div>

  <!-- Non-compliance Trend -->
  <div class="col-12 col-xxl-6 mb-4">
	<div class="card h-100">
	  <div class="card-header d-flex align-items-center justify-content-between">
		<div class="card-title mb-0">
		  <h5 class="m-0">Current Month Non-Compliance Trend</h5>
		</div>
	  </div>
	  <div class="text-center my-4" id="trendChartLoader">
		<div class="spinner-border text-primary" role="status">
		  <span class="visually-hidden">Loading...</span>
		</div>
	  </div>
	  <div id="nonComplianceTrendChartContainer" class="d-flex justify-content-center px-3 mb-3" style="height: 300px;">
		<canvas id="nonComplianceTrendChart"></canvas>
	  </div>
	</div>
  </div>
</div>

@section Scripts {
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
	<script>
		async function loadAuditorPerformance() {
		  document.getElementById("chartLoader").style.display = "block";
		  const response = await fetch('/Manager/Index/GetAuditorPerformanceData');
		  const data = await response.json();

		  const labels = data.map(d => d.auditorName);
		  const draftCounts = data.map(d => d.draftCount);
		  const doneCounts = data.map(d => d.doneCount);
		  const overdueCounts = data.map(d => d.overdueCount);
		  const rejectedCounts = data.map(d => d.rejectedCount);

		  const ctx = document.getElementById('auditorPerformanceChart').getContext('2d');
		  new Chart(ctx, {
			type: 'bar',
			data: {
			  labels: labels,
			  datasets: [
				{
				  label: 'Draft',
				  backgroundColor: '#7367F0',
				  borderRadius: 8,
				  barPercentage: 0.6,
				  data: draftCounts
				},
				{
				  label: 'Done',
				  backgroundColor: '#28C76F',
				  borderRadius: 8,
				  barPercentage: 0.6,
				  data: doneCounts
				},
				{
				  label: 'Overdue',
				  backgroundColor: '#FFB64D',
				  borderRadius: 8,
				  barPercentage: 0.6,
				  data: overdueCounts
				},
				{
				  label: 'Rejected',
				  backgroundColor: '#EA5455',
				  borderRadius: 8,
				  barPercentage: 0.6,
				  data: rejectedCounts
				}
			  ]
			},
			options: {
			  responsive: true,
			  maintainAspectRatio: false,
			  plugins: {
				legend: {
				  position: 'bottom',
				  labels: {
					usePointStyle: true,
					pointStyle: 'rectRounded',
					padding: 20,
					font: {
					  size: 13,
					  family: 'Public Sans'
					}
				  }
				}
			  },
			  scales: {
				x: {
				  stacked: true,
				  ticks: {
					font: {
					  size: 13,
					  family: 'Public Sans'
					}
				  },
				  grid: {
					display: false
				  }
				},
				y: {
				  beginAtZero: true,
				  stacked: true,
				  ticks: {
					font: {
					  size: 13,
					  family: 'Public Sans'
					}
				  },
				  grid: {
					borderDash: [7],
					color: '#e0e0e0'
				  }
				}
			  }
			}
		  });
		document.getElementById("chartLoader").style.display = "none";
		}

		document.addEventListener('DOMContentLoaded', loadAuditorPerformance);
	</script>

	<script>
		let pieChartInstance = null;

		async function loadCategories() {
		  const res = await fetch('/Manager/Index/GetComplianceCategories');
		  const categories = await res.json();
		  const dropdown = document.getElementById('categoryDropdown');

		  dropdown.innerHTML = ''; // clear any default

		  categories.forEach((c, index) => {
			const opt = document.createElement('option');
			opt.value = c.categoryId;
			opt.textContent = c.categoryName;
			dropdown.appendChild(opt);
		  });

		  if (categories.length > 0) {
			dropdown.value = categories[0].categoryId;
			loadComplianceSummary();
		  }
		}

		async function loadComplianceSummary() {
		  const categoryId = document.getElementById('categoryDropdown').value;
		  if (!categoryId) return;

		  document.getElementById("complianceChartLoader").style.display = "block";
		  document.getElementById("complianceChartContainer").style.display = "none";

		  const res = await fetch(`/Manager/Index/GetComplianceSummary?categoryId=${categoryId}`);
		  const data = await res.json();

		  const labels = data.map(x => x.status);
		  const counts = data.map(x => x.count);
		  const colors = {
			Draft: '#7367F0',
			Done: '#28C76F',
			Overdue: '#FFB64D',
			Rejected: '#EA5455'
		  };

		  const backgroundColors = labels.map(status => colors[status] || '#ccc');

		  const ctx = document.getElementById('compliancePieChart').getContext('2d');
		  if (pieChartInstance) pieChartInstance.destroy();

		  pieChartInstance = new Chart(ctx, {
			type: 'pie',
			data: {
			  labels,
			  datasets: [{
				data: counts,
				backgroundColor: backgroundColors,
				borderWidth: 1
			  }]
			},
		  options: {
			responsive: true,
			plugins: {
			  legend: {
				position: 'bottom',
				labels: {
				  usePointStyle: true,
				  pointStyle: 'rectRounded',
				  padding: 20,
				  font: {
					size: 13,
					family: 'Public Sans'
				  }
				}
			  }
			}
		  }

		  });

		  document.getElementById("complianceChartLoader").style.display = "none";
		  document.getElementById("complianceChartContainer").style.display = "block";
		}

		document.addEventListener('DOMContentLoaded', loadCategories);

	</script>

	<script>
		async function loadNonComplianceTrend() {
		  document.getElementById("trendChartLoader").style.display = "block";
		  const res = await fetch('/Manager/Index/GetNonComplianceTrend');
		  const data = await res.json();

		  const labels = data.map(d => new Date(d.date).toLocaleDateString('en-GB')); // e.g., "10/06/2025"
		  const rejected = data.map(d => d.rejectedCount);

		  const ctx = document.getElementById('nonComplianceTrendChart').getContext('2d');
		  new Chart(ctx, {
			type: 'line',
			data: {
			  labels,
			  datasets: [{
				label: 'Rejected',
				data: rejected,
				borderColor: '#EA5455',
				backgroundColor: 'rgba(234, 84, 85, 0.1)',
				tension: 0.3,
				fill: true,
				pointRadius: 4,
				pointHoverRadius: 6
			  }]
			},
			options: {
			  responsive: true,
			  plugins: {
					legend: { display: false }
			  },
			  scales: {
				y: {
				  beginAtZero: true,
				  ticks: { stepSize: 1 }
				}
			  }
			}
		  });

		  document.getElementById("trendChartLoader").style.display = "none";
		}
		document.addEventListener('DOMContentLoaded', loadNonComplianceTrend);

	</script>

}

