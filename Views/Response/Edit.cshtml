@model SmartComply.ViewModels.FormFillViewModel

@{
    ViewData["Title"] = "Edit Form";
    var auditId = Context.Request.Query["auditId"];
    bool insideCard = false;
}

<div class="card shadow-sm">
   <!-- Breadcrumb Navigation -->
    <div class="card-header p-4">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")" class="btn btn-link text-primary p-0">Home</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("MyAuditSummary", "Audit")" class="btn btn-link text-primary p-0">My Audit Summary</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("EditAudit", "Audit", new { id = Model.FormId, auditId = Model.AuditId })" class="btn btn-link text-primary p-0">Select Form</a></li>
                <li class="breadcrumb-item active" aria-current="page">Edit Form</li>
            </ol>
        </nav>
    </div>

    <div class="card-header">
        <h5 class="mb-0">
            <i class="fas fa-edit text-primary me-2"></i>
            Edit Form - @Model.Category
            <span class="badge bg-primary text-dark ms-2">Editing</span>
        </h5>
    </div>

    <div class="card-body">
        <!-- Alert for Edit Mode -->
        <div class="alert alert-primary d-flex align-items-center" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <div>
                <strong>Edit Mode:</strong> You are modifying an existing form response. Your changes will overwrite the previous submission.
            </div>
        </div>

        <!-- Staff Information -->
        <div class="staff-info mb-3 p-3 border rounded">
            <p><strong>Staff Email:</strong> @Model.StaffEmail</p>
            <p><strong>Branch Address:</strong> @Model.BranchAddress</p>
            <p><strong>Branch Active:</strong> @(Model.BranchIsActive ? "Yes" : "No")</p>
        </div>

        <!-- Form -->
        <form asp-action="Save" asp-controller="Response" method="post" enctype="multipart/form-data" id="dynamicForm">
            <input type="hidden" asp-for="FormId" />
            <input type="hidden" asp-for="FormResponderId" />
            <input type="hidden" asp-for="IsEdit" />
            <input type="hidden" asp-for="AuditId" />
            <input type="hidden" asp-for="BranchId" />
			<input type="hidden" asp-for="Category" />

            <!-- Form Questions -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title">
                        <i class="fas fa-clipboard-list me-2"></i>
                        Form Questions - @Model.Category
                    </h5>

                    @{ int currentCardIndex = -1; }
                    @for (int i = 0; i < Model.Elements.Count; i++)
                    {
                        var el = Model.Elements[i];
                        <input type="hidden" asp-for="Elements[@i].FormElementId" />
                        <input type="hidden" asp-for="Elements[@i].ElementType" />
                        <input type="hidden" asp-for="Elements[@i].IsRequired" />

                        if (el.ElementType == "CardStart")
                        {
                            if (insideCard)
                            {
                                @:</div></div>
                            }
                            insideCard = true;
                            @:<div class="card mb-4 border-primary">
                            @:<div class="card-body">
                            if (!string.IsNullOrWhiteSpace(el.Label))
                            {
                                <h5 class="card-title text-primary">@el.Label</h5>
                            }
                            continue;
                        }
                        else if (el.ElementType == "CardEnd")
                        {
                            if (insideCard)
                            {
                                @:</div></div>
                                insideCard = false;
                            }
                            continue;
                        }

                        <div class="mb-4">
                            @switch (el.ElementType)
                            {
                                case "TextInput":
                                case "Number":
                                case "Email":
                                case "Date":
                                case "Time":
                                    {
                                        string inputType = el.ElementType switch
                                        {
                                            "TextInput" => "text",
                                            "Number" => "number",
                                            "Email" => "email",
                                            "Date" => "date",
                                            "Time" => "time",
                                            _ => "text"
                                        };
                                        <label class="form-label">
                                            <strong>@el.Label</strong>
                                            @if (el.IsRequired) { <span class="text-danger">*</span> }
                                            @if (el.Answer?.Any() == true && !string.IsNullOrEmpty(el.Answer.First()))
                                            {
                                                <span class="badge bg-success ms-2">Previously Answered</span>
                                            }
                                        </label>
                                        <input name="Elements[@i].Answer[0]"
                                               value="@(el.Answer?.FirstOrDefault() ?? "")"
                                               type="@inputType"
                                               class="form-control"
                                               placeholder="@el.Placeholder"
                                               data-val="@el.IsRequired.ToString().ToLower()"
                                               data-val-required="This field is required." />
                                        <span class="text-danger small" data-valmsg-for="Elements[@i].Answer[0]" data-valmsg-replace="true"></span>
                                        break;
                                    }

                                case "TextArea":
                                    {
                                        <label class="form-label">
                                            <strong>@el.Label</strong>
                                            @if (el.IsRequired) { <span class="text-danger">*</span> }
                                            @if (el.Answer?.Any() == true && !string.IsNullOrEmpty(el.Answer.First()))
                                            {
                                                <span class="badge bg-success ms-2">Previously Answered</span>
                                            }
                                        </label>
                                        <textarea name="Elements[@i].Answer[0]"
                                                  class="form-control @(el.Answer?.Any() == true && !string.IsNullOrEmpty(el.Answer.First()) ? "border-success" : "")"
                                                  placeholder="@el.Placeholder"
                                                  data-val="@el.IsRequired.ToString().ToLower()"
                                                  data-val-required="This field is required">@(el.Answer?.FirstOrDefault() ?? "")</textarea>
                                        <span class="text-danger small" data-valmsg-for="Elements[@i].Answer[0]" data-valmsg-replace="true"></span>
                                        break;
                                    }

                                case "Checkbox":
                                    {
                                        var options = el.Options?.Split(',') ?? Array.Empty<string>();
                                        var selectedOptions = el.Answer ?? new List<string>();
                                        <label class="form-label">
                                            <strong>@el.Label</strong>
                                            @if (el.IsRequired) { <span class="text-danger">*</span> }
                                            @if (selectedOptions.Any())
                                            {
                                                <span class="badge bg-success ms-2">@selectedOptions.Count Selected</span>
                                            }
                                        </label>
                                        @foreach (var opt in options)
                                        {
                                            <div class="form-check">
                                                <input type="checkbox"
                                                       class="form-check-input"
                                                       name="Elements[@i].Answer"
                                                       value="@opt"
                                                       checked="@selectedOptions.Contains(opt)"
                                                       data-val="@el.IsRequired.ToString().ToLower()"
                                                       data-val-required="@(el.IsRequired ? "At least one option must be selected." : "")" />
                                                <label class="form-check-label">@opt</label>
                                            </div>
                                        }
                                        <span class="text-danger small" data-valmsg-for="Elements[@i].Answer" data-valmsg-replace="true"></span>
                                        break;
                                    }

                                case "RadioButton":
                                    {
                                        var options = el.Options?.Split(',') ?? Array.Empty<string>();
                                        var selectedValue = el.Answer?.FirstOrDefault();
                                        <label class="form-label">
                                            <strong>@el.Label</strong>
                                            @if (el.IsRequired) { <span class="text-danger">*</span> }
                                            @if (!string.IsNullOrEmpty(selectedValue))
                                            {
                                                <span class="badge bg-success ms-2">Previously Selected</span>
                                            }
                                        </label>
                                        @foreach (var opt in options)
                                        {
                                            <div class="form-check">
                                                <input type="radio"
                                                       class="form-check-input"
                                                       name="Elements[@i].Answer[0]"
                                                       value="@opt"
                                                       checked="@(selectedValue == opt)"
                                                       data-val="@el.IsRequired.ToString().ToLower()"
                                                       data-val-required="@(el.IsRequired ? "Please select an option." : "")" />
                                                <label class="form-check-label">@opt</label>
                                            </div>
                                        }
                                        <span class="text-danger small" data-valmsg-for="Elements[@i].Answer[0]" data-valmsg-replace="true"></span>
                                        break;
                                    }

                                case "Dropdown":
                                    {
                                        var options = el.Options?.Split(',') ?? Array.Empty<string>();
                                        var selectedValue = el.Answer?.FirstOrDefault();
                                        <label class="form-label">
                                            <strong>@el.Label</strong>
                                            @if (el.IsRequired) { <span class="text-danger">*</span> }
                                            @if (!string.IsNullOrEmpty(selectedValue))
                                            {
                                                <span class="badge bg-success ms-2">Previously Selected</span>
                                            }
                                        </label>
                                        <select name="Elements[@i].Answer[0]"
                                                class="form-select"
                                                data-val="@el.IsRequired.ToString().ToLower()"
                                                data-val-required="@(el.IsRequired ? "Please select an option." : "")">
                                            <option value="">-- Select --</option>
                                            @foreach (var opt in options)
                                            {
                                                <option value="@opt" selected="@(selectedValue == opt)">@opt</option>
                                            }
                                        </select>
                                        <span class="text-danger small" data-valmsg-for="Elements[@i].Answer[0]" data-valmsg-replace="true"></span>
                                        break;
                                    }

								case "FileUpload":
								{
									var existingFile = el.Answer?.FirstOrDefault();
									<label class="form-label">
										<strong>@el.Label</strong>
										@if (el.IsRequired) { <span class="text-danger">*</span> }
										@if (!string.IsNullOrEmpty(existingFile))
										{
											<span class="badge bg-success ms-2">File Uploaded</span>
										}
									</label>

									@if (!string.IsNullOrEmpty(existingFile))
									{
										<div class="mb-2 p-2 bg-light border rounded">
											<i class="fas fa-file me-2"></i>
											<strong>Current File:</strong> @System.IO.Path.GetFileName(existingFile)
											<a href="@existingFile" target="_blank" class="btn btn-sm btn-outline-primary ms-2">
												<i class="fas fa-external-link-alt"></i> View
											</a>
										</div>

										<!-- 👇 Hidden input to preserve existing file path -->
										<input type="hidden" name="Elements[@i].Answer[0]" value="@existingFile" />
									}

									<!-- 👇 File input for optional re-upload -->
									<input type="file"
											name="Elements[@i].Files"
											class="form-control"
											data-val="@((el.IsRequired && string.IsNullOrEmpty(existingFile)).ToString().ToLower())"
											data-val-required="@(el.IsRequired ? "File is required." : "")" />
									<span class="text-danger small" data-valmsg-for="Elements[@i].Files" data-valmsg-replace="true"></span>
									break;
								}



                                case "SectionHeader":
                                    <h4 class="mt-4 border-bottom pb-2 text-primary">
                                        <i class="fas fa-list-ul me-2"></i>@el.Label
                                    </h4>
                                    break;

                                case "Description":
                                    <p class="text-muted fst-italic">
                                        <i class="fas fa-info-circle me-2"></i>@el.Label
                                    </p>
                                    break;

                                case "Divider":
                                    <hr class="border-primary" />
                                    break;

                                default:
                                    <p class="text-danger"><strong>Unknown type: @el.ElementType</strong></p>
                                    break;
                            }
                        </div>
                    }

                    @if (currentCardIndex >= 0)
                    {
                        for (int j = 0; j <= currentCardIndex; j++)
                        {
                            @:</div></div>
                        }
                    }
                </div>
            </div>

            <!-- Submit -->
            <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                <a href="@Url.Action("MyAuditSummary", "Audit")" class="btn btn-secondary">
                    <i class="fas fa-times me-2"></i>Cancel
                </a>
               <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#saveConfirmationModal">
                    <i class="fas fa-save me-2"></i>Save
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Modal for Save Confirmation -->
<div class="modal fade" id="saveConfirmationModal" tabindex="-1" aria-labelledby="saveConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveConfirmationModalLabel">Confirm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to save this response? Changes will overwrite your previous submission.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitForm()">Confirm</button>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        function submitForm() {
            const form = document.getElementById('dynamicForm');
            let isValid = true;

            // Clear previous error messages
            document.querySelectorAll('.text-danger.small').forEach(span => span.textContent = "");

            // Client-side pre-validation
            document.querySelectorAll('[data-val="true"]').forEach(input => {
                const requiredMessage = input.getAttribute('data-val-required') || "This field is required.";
                const name = input.getAttribute('name');
                const fieldType = input.type;
                const errorSpan = document.querySelector(`span[data-valmsg-for="${name}"]`) || document.querySelector(`span[data-valmsg-for="${name}[0]"]`);

                if (fieldType === "checkbox") {
                    return; // Handled separately
                }

                if (fieldType === "radio") {
                    const radios = document.querySelectorAll(`input[name="${name}"]`);
                    const anyChecked = Array.from(radios).some(r => r.checked);
                    if (!anyChecked) {
                        isValid = false;
                        if (errorSpan) errorSpan.textContent = requiredMessage;
                    }
                }
                else if (fieldType === "file") {
                    if (!input.files || input.files.length === 0) {
                        isValid = false;
                        if (errorSpan) errorSpan.textContent = requiredMessage;
                    }
                }
                else {
                    const value = input.value.trim();
                    if (!value) {
                        isValid = false;
                        if (errorSpan) errorSpan.textContent = requiredMessage;
                    }
                }
            });

            // Checkbox group validation
            const groups = {};
            document.querySelectorAll('input[data-val="true"][type="checkbox"]').forEach(input => {
                const group = input.name;
                groups[group] = groups[group] || [];
                groups[group].push(input);
            });

            Object.keys(groups).forEach(group => {
                const inputs = groups[group];
                const name = inputs[0].getAttribute("name");
                const errorSpan = document.querySelector(`span[data-valmsg-for="${name}"]`) || document.querySelector(`span[data-valmsg-for="${name}[0]"]`);
                const isChecked = inputs.some(i => i.checked);

                if (!isChecked) {
                    isValid = false;
                    const message = inputs[0].dataset.valRequired || "At least one option must be selected.";
                    if (errorSpan) errorSpan.textContent = message;
                } else {
                    if (errorSpan) errorSpan.textContent = "";
                }
            });

            if (isValid) {
                form.submit();
            }
        }

        // Prevent default form submission
        document.getElementById('dynamicForm').addEventListener('submit', function (event) {
            event.preventDefault(); // Rely on custom submit
        });

        // Handle server-side validation errors on page load
        $(document).ready(function () {
            var errors = @Html.Raw(Json.Serialize(ViewData.ModelState.SelectMany(x => x.Value.Errors).ToList()));
            if (errors.length > 0) {
                errors.forEach(function (error) {
                    var key = error.Key;
                    var message = error.ErrorMessage;
                    var span = document.querySelector(`span[data-valmsg-for="${key}"]`);
                    if (span) span.textContent = message;
                    // Fallback for index-based keys
                    if (!span) {
                        var indexMatch = key.match(/Elements\[(\d+)\]\.Answer/);
                        if (indexMatch) {
                            var index = indexMatch[1];
                            span = document.querySelector(`span[data-valmsg-for="Elements[${index}].Answer[0]"]`) ||
                                   document.querySelector(`span[data-valmsg-for="Elements[${index}].Answer"]`);
                            if (span) span.textContent = message;
                        }
                    }
                });
            }
        });
    </script>
}
