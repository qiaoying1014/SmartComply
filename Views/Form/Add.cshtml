@model SmartComply.ViewModels.FormBuilderViewModel

@{
    ViewData["Title"] = "Add Form";
}

<div class="card">
    <!-- Breadcrumb Navigation -->
    <div class="card-header p-5">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")" class="btn btn-link text-primary p-0">Home</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Form")" class="btn btn-link text-primary p-0">Form Management</a></li>
                <li class="breadcrumb-item active" aria-current="page">Add New Form</li>
            </ol>
        </nav>
    </div>
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Add New Form</h5>
        <div>
            <!-- Reset Button with Tooltip -->
            <button type="button" class="btn btn-outline-secondary me-2" onclick="showResetConfirmationModal()" data-bs-toggle="tooltip" data-bs-placement="top" title="Reset the form and clear any changes made">Reset</button>

            <!-- Save Button with Tooltip -->
            <button type="button" class="btn btn-primary" onclick="showSaveConfirmationModal()" data-bs-toggle="tooltip" data-bs-placement="top" title="Save the form changes">Save</button>
        </div>
    </div>

    <div class="card-body">
        <div class="row">
            <!-- Builder Panel -->
            <div class="col-md-6">
                <form id="form-builder" asp-action="Add" method="post">
                    <div class="mb-3">
                        <label for="category-select" class="form-label">Form Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="Model.Categories" required>
                            <option value="" disabled selected>-- Select a Category --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="FormName" class="form-label">Form Title</label>
                        <input asp-for="FormName" class="form-control" placeholder="Enter a title for this form" required />
                        <span asp-validation-for="FormName" class="text-danger"></span>
                    </div>


                    <h5>Form Elements <small id="elements-summary" class="text-muted">0 questions added</small></h5>

                    <div id="form-elements-container" class="mb-3"></div>

                    <button type="button" class="btn btn-secondary mb-3" onclick="addElement()" data-bs-toggle="tooltip" data-bs-placement="top" title="Click to add a new form element">+ Add Element</button>
                </form>
            </div>

            <!-- Live Preview Panel -->
            <div class="col-md-6">
                <h5>Live Preview</h5>
                <div id="form-preview" class="border rounded p-3 bg-light" style="min-height: 400px;">
                    <em>No form elements yet. Start by adding one.</em>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Reset Confirmation -->
<div class="modal fade" id="resetConfirmationModal" tabindex="-1" aria-labelledby="resetConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="resetConfirmationModalLabel">Confirm Reset</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to reset this form? All changes will be lost.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="resetForm()">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for Save Confirmation -->
<div class="modal fade" id="saveConfirmationModal" tabindex="-1" aria-labelledby="saveConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveConfirmationModalLabel">Confirm Save</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to save these changes?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitForm()">Confirm</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        let index = 0;
        const container = document.getElementById("form-elements-container");
        const preview = document.getElementById("form-preview");

        Sortable.create(container, {
            animation: 150,
            handle: ".drag-handle",
            onEnd: updateOrderInputs
        });

        function addElement() {
            const currentIndex = index;

            const html = `
                <div class="form-element border mb-3 rounded shadow-sm bg-light">
                    <div class="d-flex justify-content-between align-items-center bg-secondary text-white px-3 py-2 rounded-top collapsible-header" onclick="toggleCollapse(this)" style="cursor: pointer;">
                        <div>
                            <span class="drag-handle me-2" style="cursor: grab;">☰</span>
                            <strong class="element-title">Untitled</strong>
                        </div>
                        <span class="toggle-icon">▼</span>
                    </div>

                    <div class="collapsible-body p-3">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label>Label</label>
                                <input type="text" name="FormElements[${currentIndex}].Label" class="form-control label-input" required
                                    oninput="updatePreview(); updateElementTitle(this)" />
                            </div>

                            <div class="col-md-6">
                                <label>Element Type</label>
                                <select name="FormElements[${currentIndex}].ElementType" class="form-control element-type-selector"
                                    data-index="${currentIndex}" onchange="toggleOptions(this); updatePreview()">
                                    <option value="TextInput">Text Input</option>
                                    <option value="TextArea">Text Area</option>
                                    <option value="Checkbox">Checkbox</option>
                                    <option value="RadioButton">Radio Button</option>
                                    <option value="Dropdown">Dropdown</option>
                                    <option value="Number">Number Input</option>
                                    <option value="Email">Email</option>
                                    <option value="Date">Date</option>
                                    <option value="Time">Time</option>
                                    <option value="SectionHeader">Section Title</option>
                                    <option value="FileUpload">File Upload</option>
                                    <option value="Description">Informational Text</option>
                                    <option value="Divider">Divider Line</option>
                                    <option value="CardStart">Card Section Start</option>
                                    <option value="CardEnd">Card Section End</option>
                                </select>
                            </div>

                            <div class="col-md-6">
                                <label>Placeholder</label>
                                <input type="text" name="FormElements[${currentIndex}].Placeholder" class="form-control placeholder-input"
                                    oninput="updatePreview()" />
                            </div>
							<div class="col-md-6" style="display: flex; align-items: center;">
								<label style="margin-right: 10px;">Required?</label>
								<input type="hidden" name="FormElements[${currentIndex}].IsRequiredDefault" value="false" />
								<input type="checkbox" name="FormElements[${currentIndex}].IsRequired" value="true" onchange="updatePreview()" />
							</div>

                            <div class="col-md-12 options-container" id="options-${currentIndex}" style="display: none;">
                                <label>Options (comma-separated)</label>
                                <input type="text" name="FormElements[${currentIndex}].Options" class="form-control options-input"
                                    oninput="updatePreview()" />
                            </div>

                            <input type="hidden" name="FormElements[${currentIndex}].Order" value="${currentIndex}" />
                        </div>

                        <button type="button" class="btn btn-danger btn-sm mt-3"
                            onclick="this.closest('.form-element').remove(); updateOrderInputs(); updatePreview(); updateSummary();">Remove</button>
                    </div>
                </div>
            `;

            container.insertAdjacentHTML("beforeend", html);
						// Set default label for CardStart and CardEnd to avoid empty submission
			setTimeout(() => {
				const typeSelector = container.querySelector(`select[name="FormElements[${currentIndex}].ElementType"]`);
				const labelInput = container.querySelector(`input[name="FormElements[${currentIndex}].Label"]`);

				if (typeSelector && labelInput) {
					const type = typeSelector.value;
					if (type === "CardStart") {
						labelInput.value = "Card Start";
					} else if (type === "CardEnd") {
						labelInput.value = "Card End";
					}
				}
			}, 100);

            const newSelect = container.querySelector(`select.element-type-selector[data-index="${currentIndex}"]`);
            toggleOptions(newSelect);

            index++;
            updatePreview();
            updateSummary();
        }

        function updateOrderInputs() {
            const items = container.querySelectorAll('.form-element');
            items.forEach((item, i) => {
                const orderInput = item.querySelector('input[name$=".Order"]');
                if (orderInput) orderInput.value = i;
            });
            updatePreview();
        }

        function toggleCollapse(header) {
            const body = header.nextElementSibling;
            const icon = header.querySelector(".toggle-icon");

            if (body.style.display === "none") {
                body.style.display = "block";
                icon.textContent = "▼";
            } else {
                body.style.display = "none";
                icon.textContent = "▶";
            }
        }

        function updateElementTitle(input) {
            const title = input.closest(".form-element").querySelector(".element-title");
            title.textContent = input.value.trim() || "Untitled";
        }

        function toggleOptions(select) {
            const index = select.getAttribute("data-index");
            const optionsDiv = document.getElementById(`options-${index}`);
            const formElement = select.closest('.form-element');

            const labelInput = formElement.querySelector('.label-input');
            const labelLabel = labelInput.previousElementSibling;

            const placeholderInput = formElement.querySelector('.placeholder-input');
            const placeholderLabel = placeholderInput.previousElementSibling;

            const requiredCheckbox = formElement.querySelector('input[name$=".IsRequired"]');
            const requiredLabel = requiredCheckbox.closest('div').querySelector('label');

            const type = select.value;

            if (["Divider", "CardEnd"].includes(type)) {
                labelLabel.style.display = "none";
                labelInput.style.display = "none";
                labelInput.removeAttribute('required');
            } else {
                labelLabel.style.display = "block";
                labelInput.style.display = "block";
                labelInput.setAttribute('required', '');
            }

            if (["TextInput", "TextArea", "Number", "Email"].includes(type)) {
                placeholderInput.style.display = "block";
                placeholderLabel.style.display = "block";
            } else {
                placeholderInput.style.display = "none";
                placeholderLabel.style.display = "none";
                placeholderInput.value = "";
            }

            if (["Dropdown", "Checkbox", "RadioButton"].includes(type)) {
                optionsDiv.style.display = "block";
            } else {
                optionsDiv.style.display = "none";
                formElement.querySelector('.options-input').value = "";
            }

            if (["SectionHeader", "Description", "Divider", "CardStart", "CardEnd"].includes(type)) {
                requiredLabel.style.display = "none";
                requiredCheckbox.style.display = "none";
                requiredCheckbox.checked = false;
            } else {
                requiredLabel.style.display = "block";
                requiredCheckbox.style.display = "block";
            }

            if (type === "CardStart") {
                labelInput.removeAttribute('required');
            }
			if ((type === "CardStart" || type === "CardEnd" || type === "Divider") && !labelInput.value) {
			labelInput.value = type === "CardStart" ? "Card Start"
							  : type === "CardEnd" ? "Card End"
							  : "Divider Line";
			updateElementTitle(labelInput);
			}
		}

        

        // Show Reset Confirmation Modal
        function showResetConfirmationModal() {
            $('#resetConfirmationModal').modal('show');
        }

        // Show Save Confirmation Modal
        function showSaveConfirmationModal() {
            $('#saveConfirmationModal').modal('show');
        }


        // Handle the reset form action
        function resetForm() {
            // Reset the form (you can add any additional logic here)
            const form = document.getElementById('form-builder');
            form.reset(); // Resets the form to its initial state
            updatePreview();
            updateSummary();
            $('#resetConfirmationModal').modal('hide'); // Close the modal
        }

        // Handle the save form action
        function submitForm() {
            // Submit the form
            document.getElementById('form-builder').submit();
            $('#saveConfirmationModal').modal('hide'); // Close the modal after form submission
        }

        function updatePreview() {
            const formElements = container.querySelectorAll('.form-element');
            if (formElements.length === 0) {
                preview.innerHTML = "<em>No form elements yet. Start by adding one.</em>";
                return;
            }

            let html = "";
            let openCards = 0;

            formElements.forEach(el => {
                const label = el.querySelector('.label-input')?.value || "";
                const placeholder = el.querySelector('.placeholder-input')?.value || "";
                const required = el.querySelector('input[type="checkbox"]')?.checked;
                const type = el.querySelector('.element-type-selector')?.value;
                const options = el.querySelector('.options-input')?.value || "";

                switch (type) {
                    case "TextInput":
                    case "TextArea":
                    case "Number":
                    case "Email":
                    case "Date":
                    case "Time":
                    case "FileUpload":
                        html += `<div class="mb-3">`;
                        html += `<label class="form-label"><strong>${label}${required ? " *" : ""}</strong></label>`;
                        let inputType = type === "TextInput" || type === "TextArea" ? "text" : type.toLowerCase();
                        if (type === "TextArea") {
                            html += `<textarea class="form-control" placeholder="${placeholder}" ${required ? "required" : ""}></textarea>`;
                        } else if (type === "FileUpload") {
                            html += `<input type="file" class="form-control" ${required ? "required" : ""} />`;
                        }
                        else {
                            html += `<input type="${inputType}" class="form-control" placeholder="${placeholder}" ${required ? "required" : ""} />`;
                        }
                        html += `</div>`;
                        break;

                    case "Dropdown":
                        html += `<div class="mb-3">`;
                        html += `<label class="form-label"><strong>${label}${required ? " *" : ""}</strong></label>`;
                        html += `<select class="form-select" ${required ? "required" : ""}>`;
                        html += `<option value="">-- Select --</option>`;
                        options.split(',').map(opt => opt.trim()).filter(opt => opt !== "").forEach(opt => {
                            html += `<option>${opt}</option>`;
                        });
                        html += `</select>`;
                        html += `</div>`;
                        break;

                    case "Checkbox":
                        html += `<div class="mb-3">`;
                        html += `<label class="form-label"><strong>${label}${required ? " *" : ""}</strong></label>`;
                        options.split(',').map(opt => opt.trim()).filter(opt => opt !== "").forEach((opt, idx) => {
                            const uniqueId = `preview-checkbox-${type}-${idx}`;
                            html += `
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="${uniqueId}">
                                    <label class="form-check-label" for="${uniqueId}">${opt}</label>
                                </div>`;
                        });
                        html += `</div>`;
                        break;

                    case "RadioButton":
                        html += `<div class="mb-3">`;
                        html += `<label class="form-label"><strong>${label}${required ? " *" : ""}</strong></label>`;
                        options.split(',').map(opt => opt.trim()).filter(opt => opt !== "").forEach((opt, idx) => {
                            const uniqueId = `preview-radio-${type}-${idx}`;
                            html += `
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="preview-radio-group-${type}" id="${uniqueId}">
                                    <label class="form-check-label" for="${uniqueId}">${opt}</label>
                                </div>`;
                        });
                        html += `</div>`;
                        break;

                    case "SectionHeader":
                        html += `<h5 class="mt-4 mb-2">${label || "Section Title"}</h5>`;
                        break;

                    case "Description":
                        html += `<p class="form-text text-muted">${label || "Informational Text"}</p>`;
                        break;

                    case "Divider":
                        html += `<hr class="my-4">`;
                        break;

                    case "CardStart":
                        html += `
                            <div class="card mb-4">
                                <div class="card-header bg-primary text-white">
                                    <h5>${label || "Card Section"}</h5>
                                </div>
                                <div class="card-body">`;
                        openCards++;
                        break;

                    case "CardEnd":
                        if (openCards > 0) {
                            html += `</div></div>`;
                            openCards--;
                        } else {
                            html += `<p class="text-danger">Warning: Card End without matching Card Start.</p>`;
                        }
                        break;

                    default:
                        html += `<p class="text-danger">Unknown element type: ${type}</p>`;
                        break;
                }
            });

            while (openCards > 0) {
                html += `</div></div>`;
                openCards--;
            }

            preview.innerHTML = html;
        }

        function updateSummary() {
            const count = document.querySelectorAll('.form-element').length;
            document.getElementById("elements-summary").innerText = `${count} question${count !== 1 ? "s" : ""} added`;
        }
    </script>
}
