@using SmartComply.Models
@model SmartComply.ViewModels.CorrectiveActionViewModel

@{
    ViewData["Title"] = "Edit Corrective Action";
}

<head>
	<!-- Flatpickr CSS -->
	<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">

	<!-- Flatpickr JS -->
	<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
</head>

<style>
    .readonly {
        pointer-events: none;
        background-color: #e9ecef;
    }
</style>

<div class="card">
    <!-- Breadcrumb Navigation -->
    <div class="card-header p-5">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item"><a href="@Url.Action("Index", "Admin")" class="btn btn-link text-primary p-0">Home</a></li>
                <li class="breadcrumb-item"><a href="@Url.Action("MyAuditSummary", "Audit")" class="btn btn-link text-primary p-0">My Audit Summary</a></li>
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Index", "CorrectiveAction", new { auditId = ViewBag.AuditId })" class="btn btn-link text-primary p-0">
                        Corrective Action Management
                    </a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Edit Corrective Action</li>
            </ol>
        </nav>
    </div>

    <div class="row">
        <div class="col-xl">
            <div class="card mb-6">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Edit Corrective Action</h5>
                </div>

                <div class="card-body">
                    <form id="editForm" asp-action="Edit" method="post" enctype="multipart/form-data" autocomplete="off">
                        @Html.AntiForgeryToken()
                        <input asp-for="CorrectiveActionId" type="hidden" />
                        <input asp-for="AuditId" type="hidden" />

                        <!-- Form fields -->
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">Description</label>
                            <textarea id="Description" asp-for="Description" class="form-control" rows="3" placeholder="Enter description..." autocomplete="off"></textarea>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="RootCause" class="form-label">Root Cause</label>
                            <textarea id="RootCause" asp-for="RootCause" class="form-control" rows="2" placeholder="Enter root cause..." autocomplete="off"></textarea>
                            <span asp-validation-for="RootCause" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ProposedAction" class="form-label">Proposed Action</label>
                            <textarea id="ProposedAction" asp-for="ProposedAction" class="form-control" rows="3" placeholder="Enter proposed action..." autocomplete="off"></textarea>
                            <span asp-validation-for="ProposedAction" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ResponsiblePerson" class="form-label">Responsible Person</label>
                            <input id="ResponsiblePerson" asp-for="ResponsiblePerson" class="form-control" placeholder="Enter responsible person..." autocomplete="off" />
                            <span asp-validation-for="ResponsiblePerson" class="text-danger"></span>
                        </div>

                        <div class="row g-3 mb-3">
                            <div class="col-md-6">
                                <label asp-for="TargetDate" class="form-label">Target Date</label>
                                <input asp-for="TargetDate" type="date" class="form-control" readonly />
                                <span class="form-text">Target Date cannot be changed.</span>
                            </div>
                            <div class="col-md-6">
                                <label asp-for="CompletionDate" class="form-label">Completion Date</label>
								<input id="CompletionDate"
									   name="CompletionDate"
									   class="form-control"
									   placeholder="Select a date"
									   value="@(Model.CompletionDate.HasValue ? Model.CompletionDate.Value.ToString("yyyy-MM-dd") : "")" />
								<span asp-validation-for="CompletionDate"></span>
								<div id="statusHint" class="form-text text-muted mt-1" style="display:none;">
									Completion Date cannot be changed once selected.
								</div>
                            </div>
                        </div>

                        <div class="mb-3">
							<select id="Status" class="form-select" data-initial="@Model.Status">
								@foreach (var status in Enum.GetValues(typeof(CorrectiveActionStatus)))
								{
									<option value="@status">@status</option>
								}
							</select>
							<input type="hidden" name="Status" id="StatusHidden" value="@Model.Status" />

							<div id="statusHint" class="form-text text-muted mt-1" style="display:none;">
								To change status, clear Completion Date.
							</div>
							<span asp-validation-for="Status" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Remarks" class="form-label">Remarks</label>
                            <textarea id="Remarks" asp-for="Remarks" class="form-control" rows="2" placeholder="Additional remarks..." autocomplete="off"></textarea>
                            <span asp-validation-for="Remarks" class="text-danger"></span>
                        </div>

                        <hr />

						<!-- Replace Before Photo -->
						<div class="mb-3">
							<label asp-for="BeforePhotoUpload" class="form-label">Replace Before Photo (optional)</label>
							<input asp-for="BeforePhotoUpload" type="file" class="form-control" accept=".jpg,.jpeg,.png,.gif" id="BeforePhotoUpload" />
							<span asp-validation-for="BeforePhotoUpload" class="text-danger"></span>

							<!-- Current Before Photo -->
							@if (!string.IsNullOrEmpty(Model.ExistingBeforePhotoPath))
							{
								<div class="mt-2">
									<label class="form-label">Current Before Photo</label><br />
									<img src="@Model.ExistingBeforePhotoPath"
										 alt="Existing Before"
										 class="img-fluid border"
										 style="max-width: 200px; border: 1px solid #ccc;" />
								</div>
							}

							<!-- New Before Photo Preview -->
							<div class="mt-2">
								<label class="form-label">New Before Preview</label><br />
								<img id="beforePreview" class="img-fluid border" style="max-width:200px; display:none;" alt="Preview of uploaded Before photo" />
							</div>
						</div>

						<!-- Replace After Photo -->
						<div class="mb-3">
							<label asp-for="AfterPhotoUpload" class="form-label">Replace After Photo (optional)</label>
							<input asp-for="AfterPhotoUpload" type="file" class="form-control" accept=".jpg,.jpeg,.png,.gif" id="AfterPhotoUpload" />
							<span asp-validation-for="AfterPhotoUpload" class="text-danger"></span>

							<!-- Current After Photo -->
							@if (!string.IsNullOrEmpty(Model.ExistingAfterPhotoPath))
							{
								<div class="mt-2">
									<label class="form-label">Current After Photo</label><br />
									<img src="@Model.ExistingAfterPhotoPath"
										 alt="Existing After"
										 class="img-fluid border"
										 style="max-width: 200px; border: 1px solid #ccc;" />
								</div>
							}

							<!-- New After Photo Preview -->
							<div class="mt-2">
								<label class="form-label">New After Preview</label><br />
								<img id="afterPreview" class="img-fluid border" style="max-width:200px; display:none;" alt="Preview of uploaded After photo" />
							</div>
						</div>


                        <!-- Buttons -->
                        <div>
                            <button type="button" class="btn btn-outline-secondary me-2" data-bs-toggle="tooltip" data-bs-placement="top" title="Reset the form and clear any changes made" onclick="showResetConfirmationModal()">Reset</button>
                            <button type="button" class="btn btn-primary" data-bs-toggle="tooltip" data-bs-placement="top" title="Save the new changes" onclick="showSaveConfirmationModal()">Save</button>
                        </div>
                    </form>

                </div>
            </div>
        </div>
    </div>

    <!-- Modal for Reset Confirmation -->
    <div class="modal fade" id="resetConfirmationModal" tabindex="-1" aria-labelledby="resetConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="resetConfirmationModalLabel">Confirm Reset</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to reset this form? All changes will be lost, and the form will revert to the last saved state.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="resetForm()">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Save Confirmation Modal -->
    <div class="modal fade" id="saveConfirmationModal" tabindex="-1" aria-labelledby="saveConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="saveConfirmationModalLabel">Confirm Save</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to save these changes?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitForm()">Confirm</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
	<script>
		function previewImage(inputElement, previewId) {
			const file = inputElement.files[0];
			const preview = document.getElementById(previewId);

			if (file) {
				const reader = new FileReader();
				reader.onload = function (e) {
					preview.src = e.target.result;
					preview.style.display = 'block';
				};
				reader.readAsDataURL(file);
			} else {
				preview.src = '';
				preview.style.display = 'none';
			}
		}

		document.getElementById('BeforePhotoUpload')?.addEventListener('change', function () {
			previewImage(this, 'beforePreview');
		});

		document.getElementById('AfterPhotoUpload')?.addEventListener('change', function () {
			previewImage(this, 'afterPreview');
		});

		function showResetConfirmationModal() {
			$('#resetConfirmationModal').modal('show');
		}

		function showSaveConfirmationModal() {
			$('#saveConfirmationModal').modal('show');
		}

		function resetForm() {
			window.location.href = '@Url.Action("Edit", "CorrectiveAction", new { id = Model.CorrectiveActionId, auditId = ViewBag.AuditId })';
			$('#resetConfirmationModal').modal('hide');
		}

		function submitForm() {
			$('#editForm').submit();
			$('#saveConfirmationModal').modal('hide');
		}

		function syncStatus() {
			document.getElementById("StatusHidden").value = document.getElementById("Status").value;
		}

		document.addEventListener("DOMContentLoaded", function () {
			const completionInput = document.getElementById("CompletionDate");
			const targetInput = document.getElementById("TargetDate");
			const statusSelect = document.getElementById("Status");
			const statusHint = document.getElementById("statusHint");
			const initialStatus = statusSelect.dataset.initial;
			const createdAtStr = "@Model.CreatedAt.ToString("yyyy-MM-dd")";
			const createdAt = new Date(createdAtStr);

			function filterStatusOptions(allowed) {
				const options = statusSelect.querySelectorAll("option");
				options.forEach(option => {
					option.style.display = allowed.includes(option.value) ? "block" : "none";
				});
			}

			function updateStatusBasedOnDate() {
				const completionDate = completionInput.value;
				const targetDate = targetInput.value;

				if (completionDate && createdAtStr && completionDate < createdAtStr) {
					alert("Completion Date cannot be earlier than Created Date.");
					completionInput.value = '';
					statusSelect.value = initialStatus;
					statusSelect.classList.remove("readonly");
					statusHint.style.display = "none";
					filterStatusOptions(["Pending", "InProgress"]);
					syncStatus();
					return;
				}

				if (completionDate && targetDate) {
					if (completionDate <= targetDate) {
						statusSelect.value = "Completed";
						statusSelect.classList.add("readonly");
						statusHint.style.display = "block";
					} else {
						statusSelect.value = "Overdue";
						statusSelect.classList.add("readonly");
						statusHint.style.display = "block";
					}
				} else {
					statusSelect.classList.remove("readonly");
					statusSelect.value = initialStatus;
					statusHint.style.display = "none";
					filterStatusOptions(["Pending", "InProgress"]);
				}

				syncStatus();
			}

		const completionValue = completionInput.value;
		const isReadOnlyDate = completionValue !== null && completionValue !== "";

		flatpickr("#CompletionDate", {
			dateFormat: "Y-m-d",
			allowInput: true,
			maxDate: new Date(),
			minDate: createdAt,
			onChange: updateStatusBasedOnDate,
			onValueUpdate: updateStatusBasedOnDate,
			clickOpens: !isReadOnlyDate,
			allowInput: !isReadOnlyDate,
			readOnly: isReadOnlyDate
		});

			// Event listeners
			updateStatusBasedOnDate(); // Initial
			completionInput.addEventListener("input", updateStatusBasedOnDate);
			statusSelect.addEventListener("change", syncStatus);
		});
	</script>
}

