@model SmartComply.Models.FormResponder

@{
    ViewData["Title"] = "Form Details";
}

<!-- Card Structure -->
<div class="card">
    <!-- Breadcrumb Navigation -->
    <div class="card-header p-5">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Index", "Manager")" class="btn btn-link text-primary p-0">Home</a>
                </li>
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Index", "ViewAudit")" class="btn btn-link text-primary p-0">Audit List</a>
                </li>
                <li class="breadcrumb-item">
                    <!-- Dynamic AuditDetails link with auditId -->
                    <a href="@Url.Action("AuditDetails", "ViewAudit", new { auditId = Model.AuditId })" class="btn btn-link text-primary p-0">Audit Details</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Form Details</li>
            </ol>
        </nav>
    </div>

    <!-- Card Header for Form Information -->
    <div class="card-header p-4">
        <h5 class="mb-0">Form Details</h5>
    </div>

    <!-- Form Information Section -->
    <div class="card-body p-4">
        <div class="mb-4">
            <p><strong>Category:</strong> @Model.Form?.Category?.CategoryName</p>
            <p><strong>Title:</strong> @Model.Form?.FormName</p>
            <p><strong>Submitted By:</strong> @Model.Staff?.StaffName (@Model.Staff?.StaffEmail)</p>
            <p><strong>Submitted On:</strong> @Model.SubmittedAt.ToString("dd/MM/yyyy")</p>
        </div>

        <hr />

        @foreach (var element in Model.Form.FormElements.OrderBy(e => e.Order))
        {
            var response = Model.Responses.FirstOrDefault(r => r.FormElementId == element.FormElementId);
            var answer = response?.Answer;

            var options = string.IsNullOrWhiteSpace(element.Options)
                ? new List<string>()
                : element.Options.Split(',').Select(o => o.Trim()).ToList();

            if (element.ElementType == "CardStart")
            {
                @: <div class="card mb-3">
                @:     <div class="card-body">
                if (!string.IsNullOrEmpty(element.Label))
                {
                    @:         <h5 class="card-title">@element.Label</h5>
                }
                continue;
            }

            if (element.ElementType == "CardEnd")
            {
                @:     </div> <!-- Close card-body -->
                @: </div> <!-- Close card -->
                continue;
            }

            <div class="form-group mb-4">
                <label class="form-label fw-bold">
                    @element.Label
                    @if (element.IsRequired)
                    {
                        <span class="text-danger">*</span>
                    }
                </label>

                @switch (element.ElementType)
                {
                    case "TextInput":
                    case "Email":
                    case "Number":
                    case "Date":
                    case "Time":
                        <input type="@element.ElementType.ToLower()" class="form-control" value="@answer" disabled />
                        break;

                    case "TextArea":
                        <textarea class="form-control" disabled>@answer</textarea>
                        break;

                    case "Checkbox":
                        if (options.Any())
                        {
                            foreach (var opt in options)
                            {
                                var isChecked = answer?.Split(',').Contains(opt) == true;
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" checked="@isChecked" disabled />
                                    <label class="form-check-label">@opt</label>
                                </div>
                            }
                        }
                        break;

                    case "RadioButton":
                        if (options.Any())
                        {
                            foreach (var opt in options)
                            {
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="radio_@element.FormElementId" checked="@(answer == opt)" disabled />
                                    <label class="form-check-label">@opt</label>
                                </div>
                            }
                        }
                        break;

                    case "Dropdown":
                        <select class="form-select" disabled>
                            @foreach (var opt in options)
                            {
                                <option selected="@(opt == answer)">@opt</option>
                            }
                        </select>
                        break;

                    case "SectionHeader":
                        <h4 class="mt-4 border-bottom pb-2">@element.Label</h4>
                        break;

                    case "Description":
                        <p class="text-muted fst-italic">@element.Label</p>
                        break;

                    case "Divider":
                        <hr />
                        break;

                    case "FileUpload":
                        @if (!string.IsNullOrWhiteSpace(answer))
                        {
                            <p><a href="@Url.Content(answer)" target="_blank">View uploaded file</a></p>
                        }
                        else
                        {
                            <p class="text-muted">(No file uploaded)</p>
                        }
                        break;

                    default:
                        <p class="text-danger">(Unsupported element type: @element.ElementType)</p>
                        break;
                }
            </div>
        }

    </div> <!-- Close card-body -->
</div> <!-- Close card -->
