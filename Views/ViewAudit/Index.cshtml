@model List<SmartComply.ViewModels.AuditSummaryViewModel>

@{
	ViewData["Title"] = "Audit List";
}

<!-- Card Structure -->
<div class="card">
	<!-- Breadcrumb Navigation -->
	<div class="card-header p-5">
		<nav aria-label="breadcrumb">
			<ol class="breadcrumb mb-0">
				<li class="breadcrumb-item">
					<a href="@Url.Action("Index", "Manager")" class="btn btn-link text-primary p-0">Home</a>
				</li>
				<li class="breadcrumb-item active" aria-current="page">Audit List</li>
			</ol>
		</nav>
	</div>

	<!-- Card Body with Table and Actions -->
	<div class="card-body">
		<!-- Filter and Search Form (unchanged) -->
		<form method="get" asp-action="Index" role="search" class="d-flex justify-content-between mb-4">
			<!-- … your existing filter/search markup … -->
		</form>

		<small class="text-muted">Click on the audit name to view its details</small>

		<!-- Table with Audit List -->
		<div class="table-responsive">
			<table class="table table-hover">
				<thead>
					<tr>
						<th>Audit Name</th>
						<th>Auditor</th>
						<th>Create Date</th>
						<th>Status</th>
						<th>Due Date</th>
						<th>Form Count</th>
						<th>Corrective Actions</th>
						<th>Action</th>
					</tr>
				</thead>
				<tbody>
					@if (ViewBag.NoResultsFound != null && (bool)ViewBag.NoResultsFound)
					{
						<tr>
							<td colspan="8" class="text-center text-muted">No results found for your search/filter criteria.</td>
						</tr>
					}
					else
					{
						@foreach (var item in Model)
						{
							<tr>
								<td>
									<a href="@Url.Action("AuditDetails", "Manager", new { auditId = item.Audit.AuditId })" target="_blank">
										@item.Audit.AuditName
									</a>
								</td>
								<td>@item.Audit.Staff?.StaffName</td>
								<td>@item.Audit.CreatedAt.ToShortDateString()</td>
								<td>@item.Audit.Status</td>
								<td>@item.Audit.DueDate.ToShortDateString()</td>
								<td>@item.FormCount</td>
								<td>@item.CorrectiveActionCount</td>
								<td>
									<button type="button"
											class="btn btn-outline-primary btn-sm btn-generate-qr"
											data-auditid="@item.Audit.AuditId">
										<i class="bx bx-qr-code me-1"></i> Generate QR
									</button>
								</td>
							</tr>
						}
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

<!-- QR Modal -->
<div class="modal fade" id="qrModal" tabindex="-1" aria-labelledby="qrModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="qrModalLabel">Scan to View Audit</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal"></button>
			</div>
			<div class="modal-body text-center">
				<div id="qrContainer" style="width:200px; height:200px; margin:0 auto; position:relative;">
					<!-- Bootstrap spinner, centered absolutely -->
					<div id="qrSpinner" class="spinner-border text-primary"
						 role="status"
						 style="position:absolute; top:40%; left:40%;">
						<span class="visually-hidden">Loading...</span>
					</div>
					<!-- QR image hidden until loaded -->
					<img id="qrModalImg"
						 alt="Audit QR Code"
						 style="width:100%; height:100%; display:none;" />
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	<script>
		// Point at ManagerController.Qr
		const qrBase = '@Url.Action("Qr", "ViewAudit")';
		const qrImg     = document.getElementById('qrModalImg');
		const qrSpinner = document.getElementById('qrSpinner');

		document.querySelectorAll('.btn-generate-qr').forEach(btn => {
		  btn.addEventListener('click', () => {
			const auditId = btn.getAttribute('data-auditid');
			const url     = `${qrBase}?auditId=${auditId}&_=${Date.now()}`;

			// Show modal & spinner, hide image
			new bootstrap.Modal(document.getElementById('qrModal')).show();
			qrSpinner.style.display = 'block';
			qrImg.style.display     = 'none';
			qrImg.removeAttribute('src');

			// When image loads: hide spinner & show image
			qrImg.onload = () => {
			  qrSpinner.style.display = 'none';
			  qrImg.style.display     = 'block';
			};
			// On error: hide spinner
			qrImg.onerror = () => {
			  qrSpinner.style.display = 'none';
			};

			// Kick off the load
			qrImg.src = url;
		  });
		});
	</script>
}
